'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.create = exports.compose = exports.applyWidth = void 0

//******* FILE IS COPIED FROM ../builder/src/utilities/StyleSheet.js ******
//************************* DO NOT EDIT BY HAND ************************
const create = (styles) => styles // Like StyleSheet.compose, but concatenates shared keys' values into arrays.

exports.create = create

const compose = (style1, style2) => {
  const res = { ...style1 }

  if (!style1) {
    return style2
  }

  if (!style2) {
    return style1
  }

  for (const [k, v] of Object.entries(style2)) {
    let resV = res[k]

    if (resV === undefined) {
      res[k] = v
    } else if (Array.isArray(resV) && Array.isArray(v)) {
      res[k] = resV.concat(v)
    } else if (Array.isArray(resV)) {
      res[k] = resV.concat([v])
    } else if (Array.isArray(v)) {
      res[k] = [resV].concat(v)
    } else {
      res[k] = [resV, v]
    }
  }

  return res
}

exports.compose = compose

const isValidStyleValue = (value) => value !== '' && ['string', 'number'].includes(typeof value) // Given a window width, convert a the style to a StyleSheet style, using values from
// the highest and most recent minWidth for each style key, which fits within the minWidth.

const applyWidth = (style, width) => {
  const res = {}

  if (!style) {
    return {}
  }

  for (const [k, v] of Object.entries(style)) {
    let resV // If there is an array of values, choose the last one with the largest minWidth
    // which fits in the current screen width

    if (Array.isArray(v)) {
      let maxMinWidth = 0
      v.filter((innerV) => innerV !== undefined).forEach((innerV) => {
        const minWidth = innerV.minWidth ?? 0
        const value = innerV.value ?? innerV

        if (isValidStyleValue(value) && minWidth <= width && minWidth >= maxMinWidth) {
          resV = value
          maxMinWidth = minWidth
        }
      }) // Otherwise, check if the value fits in the current screen width
    } else if (v !== undefined) {
      const minWidth = v.minWidth ?? 0
      const value = v.value ?? v

      if (isValidStyleValue(value) && minWidth <= width) {
        resV = value
      }
    }

    if (resV !== undefined) {
      res[k] = resV
    }
  }

  return res
}

exports.applyWidth = applyWidth
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGUiLCJzdHlsZXMiLCJjb21wb3NlIiwic3R5bGUxIiwic3R5bGUyIiwicmVzIiwiayIsInYiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVzViIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsImlzVmFsaWRTdHlsZVZhbHVlIiwidmFsdWUiLCJpbmNsdWRlcyIsImFwcGx5V2lkdGgiLCJzdHlsZSIsIndpZHRoIiwibWF4TWluV2lkdGgiLCJmaWx0ZXIiLCJpbm5lclYiLCJmb3JFYWNoIiwibWluV2lkdGgiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvU3R5bGVTaGVldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyoqKioqKiogRklMRSBJUyBDT1BJRUQgRlJPTSAuLi9idWlsZGVyL3NyYy91dGlsaXRpZXMvU3R5bGVTaGVldC5qcyAqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKiBETyBOT1QgRURJVCBCWSBIQU5EICoqKioqKioqKioqKioqKioqKioqKioqKlxuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IHN0eWxlcyA9PiBzdHlsZXM7XG5cbi8vIExpa2UgU3R5bGVTaGVldC5jb21wb3NlLCBidXQgY29uY2F0ZW5hdGVzIHNoYXJlZCBrZXlzJyB2YWx1ZXMgaW50byBhcnJheXMuXG5leHBvcnQgY29uc3QgY29tcG9zZSA9IChzdHlsZTEsIHN0eWxlMikgPT4ge1xuICBjb25zdCByZXMgPSB7IC4uLnN0eWxlMSB9O1xuICBpZiAoIXN0eWxlMSkge1xuICAgIHJldHVybiBzdHlsZTI7XG4gIH1cbiAgaWYgKCFzdHlsZTIpIHtcbiAgICByZXR1cm4gc3R5bGUxO1xuICB9XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlMikpIHtcbiAgICBsZXQgcmVzViA9IHJlc1trXTtcbiAgICBpZiAocmVzViA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNWKSAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICByZXNba10gPSByZXNWLmNvbmNhdCh2KTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzVikpIHtcbiAgICAgIHJlc1trXSA9IHJlc1YuY29uY2F0KFt2XSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICByZXNba10gPSBbcmVzVl0uY29uY2F0KHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba10gPSBbcmVzViwgdl07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5jb25zdCBpc1ZhbGlkU3R5bGVWYWx1ZSA9IHZhbHVlID0+XG4gIHZhbHVlICE9PSBcIlwiICYmIFtcInN0cmluZ1wiLCBcIm51bWJlclwiXS5pbmNsdWRlcyh0eXBlb2YgdmFsdWUpO1xuXG4vLyBHaXZlbiBhIHdpbmRvdyB3aWR0aCwgY29udmVydCBhIHRoZSBzdHlsZSB0byBhIFN0eWxlU2hlZXQgc3R5bGUsIHVzaW5nIHZhbHVlcyBmcm9tXG4vLyB0aGUgaGlnaGVzdCBhbmQgbW9zdCByZWNlbnQgbWluV2lkdGggZm9yIGVhY2ggc3R5bGUga2V5LCB3aGljaCBmaXRzIHdpdGhpbiB0aGUgbWluV2lkdGguXG5leHBvcnQgY29uc3QgYXBwbHlXaWR0aCA9IChzdHlsZSwgd2lkdGgpID0+IHtcbiAgY29uc3QgcmVzID0ge307XG4gIGlmICghc3R5bGUpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoc3R5bGUpKSB7XG4gICAgbGV0IHJlc1Y7XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gYXJyYXkgb2YgdmFsdWVzLCBjaG9vc2UgdGhlIGxhc3Qgb25lIHdpdGggdGhlIGxhcmdlc3QgbWluV2lkdGhcbiAgICAvLyB3aGljaCBmaXRzIGluIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aFxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICBsZXQgbWF4TWluV2lkdGggPSAwO1xuICAgICAgdi5maWx0ZXIoaW5uZXJWID0+IGlubmVyViAhPT0gdW5kZWZpbmVkKS5mb3JFYWNoKGlubmVyViA9PiB7XG4gICAgICAgIGNvbnN0IG1pbldpZHRoID0gaW5uZXJWLm1pbldpZHRoID8/IDA7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5uZXJWLnZhbHVlID8/IGlubmVyVjtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzVmFsaWRTdHlsZVZhbHVlKHZhbHVlKSAmJlxuICAgICAgICAgIG1pbldpZHRoIDw9IHdpZHRoICYmXG4gICAgICAgICAgbWluV2lkdGggPj0gbWF4TWluV2lkdGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzViA9IHZhbHVlO1xuICAgICAgICAgIG1heE1pbldpZHRoID0gbWluV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiB0aGUgdmFsdWUgZml0cyBpbiB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGhcbiAgICB9IGVsc2UgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbWluV2lkdGggPSB2Lm1pbldpZHRoID8/IDA7XG4gICAgICBjb25zdCB2YWx1ZSA9IHYudmFsdWUgPz8gdjtcbiAgICAgIGlmIChpc1ZhbGlkU3R5bGVWYWx1ZSh2YWx1ZSkgJiYgbWluV2lkdGggPD0gd2lkdGgpIHtcbiAgICAgICAgcmVzViA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzViAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba10gPSByZXNWO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUdDLE1BQU0sSUFBSUEsTUFBekIsQyxDQUVQOzs7OztBQUNPLE1BQU1DLE9BQU8sR0FBRyxDQUFD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
